{
    '$schema' = 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json';
    scopeName = 'source.tm-gplist';
    name = 'TextMate Grammar Property List';
    patterns = (
        { include = '#dict'; }
    );
    repository = {
        keyword = {
            name = 'keyword.control.tm-gplist';
            match = '(?x)
                \b(
                    scopeName
                    | uuid
                    | fileTypes
                    | foldingStartMarker | foldingStopMarker
                    | patterns
                    | firstLineMatch
                    | repository
                    | name | contentName
                    | match
                    | begin | end | while
                    | captures | beginCaptures | endCaptures
                    | include 
                    | comment
                )\b
            ';
        };
        element = {
            patterns = (
                { include = '#array'; },
                { include = '#dict'; },
                { include = '#string'; }
            );
        };
        reference = {
            name = 'variable.other.tm-gplist';
            comment = 'Reference can only be an unquoted string';
            match = '#[\w\d-]+';
        };
        string = {
            patterns = (
                {
                    name = 'string.quoted.double.tm-gplist';
                    begin = '"';
                    beginCaptures = {
                        0 = {
                            name = 'punctuation.definition.string.begin.tm-gplist';
                        };
                    };
                    end = '"';
                    endCaptures = {
                        0 = {
                            name = 'punctuation.definition.string.end.tm-gplist';
                        };
                    };
                    patterns = (
                        { include = '#reference'; },
                        {
                            match = '\\(?:[\\fnrt"]|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})';
                            name = 'constant.character.escape.tm-gplist';
                        },
                        {
                            match = '\\.';
                            name = 'invalid.illegal.unrecognized-string-escape.tm-gplist';
                        }
                    );
                },
                {
                    name = 'string.quoted.single.tm-gplist';
                    begin = "'";
                    beginCaptures = {
                        0 = {
                            name = 'punctuation.definition.string.begin.tm-gplist';
                        };
                    };
                    end = "'(?!')";
                    endCaptures = {
                        0 = {
                            name = 'punctuation.definition.string.end.tm-gplist';
                        };
                    };
                    patterns = (
                        { include = '#reference'; },
                        {
                            name = 'constant.character.escape.tm-gplist';
                            match = "''";
                        }
                    );
                },
                {
                    name = 'string.unquoted.tm-gplist';
                    match = '[\w\d-]+';
                }
            );
        };
        dict-key = {
            name = 'entity.name.tag meta.structure.dict-key.tm-gplist';
            comment = 'Match anything that can start a string (same as dict-item)';
            begin = '(?=[\w\d\-''"])';
            end = '(?==)';
            patterns = (
                { include = '#keyword'; },
                {
                    comment = 'Only unquoted keys will have special coloring';
                    match = '[\w\d-]+';
                },
                { include = '#string'; },
                {
                    match = '[^\s=]';
                    name = 'invalid.illegal.expected-dict-assignment-operator.tm-gplist';
                }
            );
        };
        dict-value = {
            name = 'meta.structure.dict-value.tm-gplist';
            comment = 'Consumes assignment operator';
            begin = '=';
            beginCaptures = {
                0 = { name = 'keyword.operator.assignment.dict.tm-gplist'; };
            };
            end = '(?=;)';
            patterns = (
                { include = '#element'; },
                {
                    match = '[^\s;]';
                    name = 'invalid.illegal.expected-dict-separator.tm-gplist';
                }
            );
        };
        dict-item = {
            name = 'meta.structure.dict-item.tm-gplist';
            comment = 'Match anything that can start a string (same as dict-key)';
            begin = '(?=[\w\d\-''"])';
            end = '(;)';
            endCaptures = {
                0 = { name = 'punctuation.separator.dict.end.tm-gplist'; };
            };
            patterns = (
                { include = '#dict-key'; },
                { include = '#dict-value'; }
            );
        };
        dict = {
            name = 'meta.structure.dict.tm-gplist';
            begin = '\{';
            beginCaptures = {
                0 = { name = 'punctuation.definition.dict.begin.tm-gplist'; };
            };
            end = '\}';
            endCaptures = {
                0 = { name = 'punctuation.definition.dict.end.tm-gplist'; };
            };
            patterns = (
                { include = '#dict-item'; },
                {
                    match = '[^\s\}]';
                    name = 'invalid.illegal.expected-dict-end-bracket.tm-gplist';
                }
            );
        };
        array = {
            name = 'meta.structure.array.tm-gplist';
            begin = '\(';
            beginCaptures = {
                0 = { name = 'punctuation.definition.array.begin.tm-gplist'; };
            };
            end = '\)';
            endCaptures = {
                0 = { name = 'punctuation.definition.array.end.tm-gplist'; };
            };
            patterns = (
                { include = '#element'; },
                {
                    match = ',';
                    name = 'punctuation.separator.array.end.tm-gplist';
                },
                {
                    match = '[^\s\)]';
                    name = 'invalid.illegal.expected-array-separator-or-end.tm-gplist';
                }
            );
        };
    };
}